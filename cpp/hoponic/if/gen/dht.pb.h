// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dht.proto

#ifndef PROTOBUF_INCLUDED_dht_2eproto
#define PROTOBUF_INCLUDED_dht_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "base.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_dht_2eproto 

namespace protobuf_dht_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_dht_2eproto
namespace Dht {
class CDhtInitReq;
class CDhtInitReqDefaultTypeInternal;
extern CDhtInitReqDefaultTypeInternal _CDhtInitReq_default_instance_;
}  // namespace Dht
namespace google {
namespace protobuf {
template<> ::Dht::CDhtInitReq* Arena::CreateMaybeMessage<::Dht::CDhtInitReq>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Dht {

enum MeasType {
  TEMPERATURE = 0,
  HUMIDITY = 1,
  TEMPERATURE_AND_HUMIDITY = 2,
  MeasType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MeasType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MeasType_IsValid(int value);
const MeasType MeasType_MIN = TEMPERATURE;
const MeasType MeasType_MAX = TEMPERATURE_AND_HUMIDITY;
const int MeasType_ARRAYSIZE = MeasType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MeasType_descriptor();
inline const ::std::string& MeasType_Name(MeasType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MeasType_descriptor(), value);
}
inline bool MeasType_Parse(
    const ::std::string& name, MeasType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MeasType>(
    MeasType_descriptor(), name, value);
}
// ===================================================================

class CDhtInitReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Dht.CDhtInitReq) */ {
 public:
  CDhtInitReq();
  virtual ~CDhtInitReq();

  CDhtInitReq(const CDhtInitReq& from);

  inline CDhtInitReq& operator=(const CDhtInitReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDhtInitReq(CDhtInitReq&& from) noexcept
    : CDhtInitReq() {
    *this = ::std::move(from);
  }

  inline CDhtInitReq& operator=(CDhtInitReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDhtInitReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDhtInitReq* internal_default_instance() {
    return reinterpret_cast<const CDhtInitReq*>(
               &_CDhtInitReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CDhtInitReq* other);
  friend void swap(CDhtInitReq& a, CDhtInitReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDhtInitReq* New() const final {
    return CreateMaybeMessage<CDhtInitReq>(NULL);
  }

  CDhtInitReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDhtInitReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDhtInitReq& from);
  void MergeFrom(const CDhtInitReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDhtInitReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Base.CHwInitReq base_init = 1;
  bool has_base_init() const;
  void clear_base_init();
  static const int kBaseInitFieldNumber = 1;
  private:
  const ::Base::CHwInitReq& _internal_base_init() const;
  public:
  const ::Base::CHwInitReq& base_init() const;
  ::Base::CHwInitReq* release_base_init();
  ::Base::CHwInitReq* mutable_base_init();
  void set_allocated_base_init(::Base::CHwInitReq* base_init);

  // .Dht.MeasType mType = 2;
  void clear_mtype();
  static const int kMTypeFieldNumber = 2;
  ::Dht::MeasType mtype() const;
  void set_mtype(::Dht::MeasType value);

  // @@protoc_insertion_point(class_scope:Dht.CDhtInitReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Base::CHwInitReq* base_init_;
  int mtype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_dht_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CDhtInitReq

// .Base.CHwInitReq base_init = 1;
inline bool CDhtInitReq::has_base_init() const {
  return this != internal_default_instance() && base_init_ != NULL;
}
inline const ::Base::CHwInitReq& CDhtInitReq::_internal_base_init() const {
  return *base_init_;
}
inline const ::Base::CHwInitReq& CDhtInitReq::base_init() const {
  const ::Base::CHwInitReq* p = base_init_;
  // @@protoc_insertion_point(field_get:Dht.CDhtInitReq.base_init)
  return p != NULL ? *p : *reinterpret_cast<const ::Base::CHwInitReq*>(
      &::Base::_CHwInitReq_default_instance_);
}
inline ::Base::CHwInitReq* CDhtInitReq::release_base_init() {
  // @@protoc_insertion_point(field_release:Dht.CDhtInitReq.base_init)
  
  ::Base::CHwInitReq* temp = base_init_;
  base_init_ = NULL;
  return temp;
}
inline ::Base::CHwInitReq* CDhtInitReq::mutable_base_init() {
  
  if (base_init_ == NULL) {
    auto* p = CreateMaybeMessage<::Base::CHwInitReq>(GetArenaNoVirtual());
    base_init_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Dht.CDhtInitReq.base_init)
  return base_init_;
}
inline void CDhtInitReq::set_allocated_base_init(::Base::CHwInitReq* base_init) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(base_init_);
  }
  if (base_init) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      base_init = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, base_init, submessage_arena);
    }
    
  } else {
    
  }
  base_init_ = base_init;
  // @@protoc_insertion_point(field_set_allocated:Dht.CDhtInitReq.base_init)
}

// .Dht.MeasType mType = 2;
inline void CDhtInitReq::clear_mtype() {
  mtype_ = 0;
}
inline ::Dht::MeasType CDhtInitReq::mtype() const {
  // @@protoc_insertion_point(field_get:Dht.CDhtInitReq.mType)
  return static_cast< ::Dht::MeasType >(mtype_);
}
inline void CDhtInitReq::set_mtype(::Dht::MeasType value) {
  
  mtype_ = value;
  // @@protoc_insertion_point(field_set:Dht.CDhtInitReq.mType)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Dht

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Dht::MeasType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Dht::MeasType>() {
  return ::Dht::MeasType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_dht_2eproto
